generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

type EmbeddedMoviesAwards {
  nominations Int
  text        String
  wins        Int
}

type EmbeddedMoviesImdb {
  id     Int
  /// Multiple data types found: String: 0.2%, Float: 99.8% out of 1000 sampled entries
  rating Json
  /// Multiple data types found: String: 0.2%, Int: 99.8% out of 1000 sampled entries
  votes  Json
}

type EmbeddedMoviesTomatoes {
  boxOffice   String?
  consensus   String?
  critic      EmbeddedMoviesTomatoesCritic?
  dvd         DateTime?                     @db.Date
  fresh       Int?
  lastUpdated DateTime                      @db.Date
  production  String?
  rotten      Int?
  viewer      EmbeddedMoviesTomatoesViewer
  website     String?
}

type EmbeddedMoviesTomatoesCritic {
  meter      Int
  numReviews Int
  rating     Float
}

type EmbeddedMoviesTomatoesViewer {
  meter      Int?
  numReviews Int
  rating     Float
}

type MoviesAwards {
  nominations Int
  text        String
  wins        Int
}

type MoviesImdb {
  id     Int
  /// Multiple data types found: String: 0.2%, Float: 99.8% out of 1000 sampled entries
  rating Json
  /// Multiple data types found: String: 0.2%, Int: 99.8% out of 1000 sampled entries
  votes  Json
}

type MoviesTomatoes {
  boxOffice   String?
  consensus   String?
  critic      MoviesTomatoesCritic?
  dvd         DateTime?             @db.Date
  fresh       Int?
  lastUpdated DateTime              @db.Date
  production  String?
  rotten      Int?
  viewer      MoviesTomatoesViewer
  website     String?
}

type MoviesTomatoesCritic {
  meter      Int?
  numReviews Int
  rating     Float?
}

type MoviesTomatoesViewer {
  meter      Int?
  numReviews Int
  rating     Float
}

type TheatersLocation {
  address TheatersLocationAddress
  geo     TheatersLocationGeo
}

type TheatersLocationAddress {
  city    String
  state   String
  street1 String
  street2 String?
  zipcode String
}

type TheatersLocationGeo {
  coordinates Float[]
  type        String
}

type MobileNumber {
  countryCode String
  phoneNumber String
}

type History {
  movie_id  String
  timeStamp String @default("00:00:00")
}

model comments {
  id       String          @id @default(auto()) @map("_id") @db.ObjectId
  date     DateTime        @db.Date
  userId   String          @db.ObjectId
  movieId  String          @db.ObjectId
  movie    embedded_movies @relation(fields: [movieId], references: [id])
  parentId String
  text     String
  user     User            @relation(fields: [userId], references: [id])
}

model embedded_movies {
  id                 String                  @id @default(auto()) @map("_id") @db.ObjectId
  awards             EmbeddedMoviesAwards
  cast               String[]
  countries          String[]
  directors          String[]
  fullplot           String?
  genres             String[]
  imdb               EmbeddedMoviesImdb
  languages          String[]
  lastupdated        String
  metacritic         Int?
  num_mflix_comments Int
  plot               String?
  plot_embedding     Float[]
  poster             String?
  rated              String?
  released           DateTime?               @db.Date
  runtime            Int?
  title              String
  tomatoes           EmbeddedMoviesTomatoes?
  type               String
  writers            String[]
  year               Int
  User               User?                   @relation(fields: [userId], references: [id])
  userId             String?                 @db.ObjectId
  comments           comments[]
}

model User {
  id            String              @id @default(auto()) @map("_id") @db.ObjectId
  name          String?             @unique(map: "name_1")
  email         String?             @unique(map: "email_1")
  password      String?
  phone         MobileNumber
  isAdmin       Boolean             @default(false)
  paymentToken  String?
  subscriptions SubscriptionState[]
  genres        String[]
  languages     String[]
  history       History[]
  watchLater    embedded_movies[]
  createdAt     DateTime?            @default(now())
  updatedAt     DateTime?            @updatedAt
  comments      comments[]
}

model SubscriptionState {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  userId         String        @db.ObjectId
  subscriptionId String        @db.ObjectId
  subscription   Subscriptions @relation(fields: [subscriptionId], references: [id])
  status         String
  startDate      DateTime      @db.Date
  endDate        DateTime      @db.Date
  User           User          @relation(fields: [userId], references: [id])
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

enum SubscriptionType {
  FREE
  BASIC
  STANDARD
  PREMIUM
  PLATINUM
}

model Subscriptions {
  id                 String                 @id @default(auto()) @map("_id") @db.ObjectId
  type               SubscriptionType
  price              Float
  discountPercentage Float
  features           SubscriptionFeatures[]
  SubscriptionState  SubscriptionState[]
  discount           Int
  createdAt          DateTime               @default(now())
  updatedAt          DateTime               @updatedAt
}

model SubscriptionFeatures {
  featureId          String         @id @default(auto()) @map("_id") @db.ObjectId
  featureName        String
  featureDescription String
  featureValue       String
  Subscriptions      Subscriptions? @relation(fields: [subscriptionsId], references: [id])
  subscriptionsId    String?        @db.ObjectId
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
}